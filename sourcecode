{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from datetime import datetime\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "# Machine Learning Libraries\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\n",
        "from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve, precision_recall_curve\n",
        "from sklearn.impute import SimpleImputer\n",
        "from imblearn.over_sampling import SMOTE\n",
        "\n",
        "# Set style for plots\n",
        "plt.style.use('seaborn-v0_8')\n",
        "sns.set_palette(\"husl\")\n",
        "\n",
        "class FraudDetectionPipeline:\n",
        "    def __init__(self, data_path):\n",
        "        \"\"\"Initialize the fraud detection pipeline with data path.\"\"\"\n",
        "        self.data_path = data_path\n",
        "        self.df = None\n",
        "        self.X = None\n",
        "        self.y = None\n",
        "        self.X_train = None\n",
        "        self.X_test = None\n",
        "        self.y_train = None\n",
        "        self.y_test = None\n",
        "        self.models = {}\n",
        "        self.results = {}\n",
        "\n",
        "    def load_data(self):\n",
        "        \"\"\"Load the dataset from CSV file.\"\"\"\n",
        "        try:\n",
        "            self.df = pd.read_csv(self.data_path)\n",
        "            print(\"Data loaded successfully!\")\n",
        "            print(f\"Dataset shape: {self.df.shape}\")\n",
        "            return self.df\n",
        "        except FileNotFoundError:\n",
        "            print(f\"Error: Dataset not found at {self.data_path}\")\n",
        "            self.df = None # Ensure self.df is explicitly set to None on failure\n",
        "            return None\n",
        "        except Exception as e:\n",
        "            print(f\"Error loading data: {e}\")\n",
        "            self.df = None # Ensure self.df is explicitly set to None on failure\n",
        "            return None\n",
        "\n",
        "    def explore_data(self):\n",
        "        \"\"\"Perform exploratory data analysis.\"\"\"\n",
        "        if self.df is None:\n",
        "            print(\"Data not loaded. Cannot perform exploration.\")\n",
        "            return\n",
        "        print(\"\\n=== DATASET OVERVIEW ===\")\n",
        "        print(f\"Dataset shape: {self.df.shape}\")\n",
        "        print(f\"\\nColumns: {list(self.df.columns)}\")\n",
        "\n",
        "        print(\"\\n=== DATA TYPES ===\")\n",
        "        print(self.df.dtypes)\n",
        "\n",
        "        print(\"\\n=== MISSING VALUES ===\")\n",
        "        missing_values = self.df.isnull().sum()\n",
        "        print(missing_values[missing_values > 0])\n",
        "\n",
        "        print(\"\\n=== BASIC STATISTICS ===\")\n",
        "        print(self.df.describe())\n",
        "\n",
        "        print(\"\\n=== FRAUD DISTRIBUTION ===\")\n",
        "        fraud_counts = self.df['IsFraud'].value_counts()\n",
        "        print(fraud_counts)\n",
        "        print(f\"Fraud percentage: {fraud_counts[1] / len(self.df) * 100:.2f}%\")\n",
        "\n",
        "    def visualize_data(self):\n",
        "        \"\"\"Create visualizations for the dataset.\"\"\"\n",
        "        # Added check to prevent error if data wasn't loaded\n",
        "        if self.df is None:\n",
        "            print(\"Data not loaded. Cannot perform visualization.\")\n",
        "            return\n",
        "\n",
        "        fig, axes = plt.subplots(2, 2, figsize=(15, 12))\n",
        "\n",
        "        # Fraud distribution\n",
        "        self.df['IsFraud'].value_counts().plot(kind='bar', ax=axes[0,0])\n",
        "        axes[0,0].set_title('Fraud Distribution')\n",
        "        axes[0,0].set_xlabel('Is Fraud (0: No, 1: Yes)')\n",
        "        axes[0,0].set_ylabel('Count')\n",
        "\n",
        "        # Amount distribution\n",
        "        axes[0,1].hist(self.df['Amount'], bins=50, edgecolor='black', alpha=0.7)\n",
        "        axes[0,1].set_title('Transaction Amount Distribution')\n",
        "        axes[0,1].set_xlabel('Amount')\n",
        "        axes[0,1].set_ylabel('Frequency')\n",
        "\n",
        "        # Amount by fraud status\n",
        "        sns.boxplot(data=self.df, x='IsFraud', y='Amount', ax=axes[1,0])\n",
        "        axes[1,0].set_title('Transaction Amount by Fraud Status')\n",
        "\n",
        "        # Category distribution\n",
        "        category_counts = self.df['Category'].value_counts()\n",
        "        axes[1,1].pie(category_counts.values, labels=category_counts.index, autopct='%1.1f%%')\n",
        "        axes[1,1].set_title('Transaction Categories')\n",
        "\n",
        "        plt.tight_layout()\n",
        "        plt.show()\n",
        "\n",
        "        # Fraud by category\n",
        "        plt.figure(figsize=(12, 6))\n",
        "        fraud_by_category = self.df.groupby(['Category', 'IsFraud']).size().unstack(fill_value=0)\n",
        "        fraud_by_category.plot(kind='bar')\n",
        "        plt.title('Fraud Cases by Category')\n",
        "        plt.xlabel('Category')\n",
        "        plt.ylabel('Count')\n",
        "        plt.legend(['Not Fraud', 'Fraud'])\n",
        "        plt.xticks(rotation=45)\n",
        "        plt.tight_layout()\n",
        "        plt.show()\n",
        "\n",
        "        # Fraud by location\n",
        "        plt.figure(figsize=(15, 8))\n",
        "        fraud_by_location = self.df[self.df['IsFraud'] == 1]['Location'].value_counts().head(10)\n",
        "        fraud_by_location.plot(kind='bar')\n",
        "        plt.title('Top 10 Locations with Most Fraud Cases')\n",
        "        plt.xlabel('Location')\n",
        "        plt.ylabel('Fraud Count')\n",
        "        plt.xticks(rotation=45)\n",
        "        plt.tight_layout()\n",
        "        plt.show()\n",
        "\n",
        "    def preprocess_data(self):\n",
        "        \"\"\"Preprocess the data for machine learning.\"\"\"\n",
        "        if self.df is None:\n",
        "             print(\"Data not loaded. Cannot perform preprocessing.\")\n",
        "             return None, None # Return None for X and y\n",
        "\n",
        "        # Create a copy of the dataframe\n",
        "        df_processed = self.df.copy()\n",
        "\n",
        "        # Convert TransactionTime to datetime\n",
        "        df_processed['TransactionTime'] = pd.to_datetime(df_processed['TransactionTime'])\n",
        "\n",
        "        # Extract time features\n",
        "        df_processed['Hour'] = df_processed['TransactionTime'].dt.hour\n",
        "        df_processed['DayOfWeek'] = df_processed['TransactionTime'].dt.dayofweek\n",
        "        df_processed['IsWeekend'] = (df_processed['DayOfWeek'] >= 5).astype(int)\n",
        "\n",
        "        # Extract IP address network parts\n",
        "        df_processed['IP_Network'] = df_processed['IPAddress'].str.split('.').str[0:2].str.join('.')\n",
        "\n",
        "        # Handle categorical variables\n",
        "        # Location features\n",
        "        # Added check for potential None values in split result\n",
        "        df_processed['City'] = df_processed['Location'].str.split(',').str[0].str.strip()\n",
        "        df_processed['State'] = df_processed['Location'].str.split(',').str[1].str.strip()\n",
        "\n",
        "\n",
        "        # Amount-based features\n",
        "        df_processed['Amount_Log'] = np.log1p(df_processed['Amount'])\n",
        "        df_processed['Amount_Squared'] = df_processed['Amount'] ** 2\n",
        "\n",
        "        # User behavior features\n",
        "        user_stats = df_processed.groupby('UserID').agg({\n",
        "            'Amount': ['mean', 'std', 'sum'],\n",
        "            'TransactionID': 'count'\n",
        "        }).reset_index()\n",
        "        user_stats.columns = ['UserID', 'User_Avg_Amount', 'User_Std_Amount', 'User_Total_Amount', 'User_Transaction_Count']\n",
        "\n",
        "        # Merge user statistics\n",
        "        df_processed = df_processed.merge(user_stats, on='UserID', how='left')\n",
        "\n",
        "        # Fill missing values for user statistics\n",
        "        df_processed['User_Std_Amount'] = df_processed['User_Std_Amount'].fillna(0)\n",
        "\n",
        "        # One-hot encode categorical variables\n",
        "        categorical_features = ['Merchant', 'Category', 'Device', 'City', 'State', 'IP_Network']\n",
        "        df_encoded = pd.get_dummies(df_processed, columns=categorical_features, drop_first=True)\n",
        "\n",
        "        # Select features for modeling\n",
        "        feature_columns = [col for col in df_encoded.columns if col not in ['TransactionID', 'UserID', 'TransactionTime', 'Location', 'IPAddress', 'IsFraud']]\n",
        "\n",
        "        self.X = df_encoded[feature_columns]\n",
        "        self.y = df_encoded['IsFraud']\n",
        "\n",
        "        # Handle any remaining missing values\n",
        "        imputer = SimpleImputer(strategy='median')\n",
        "        self.X = pd.DataFrame(imputer.fit_transform(self.X), columns=self.X.columns)\n",
        "\n",
        "        print(f\"Feature matrix shape: {self.X.shape}\")\n",
        "        print(f\"Number of features: {len(feature_columns)}\")\n",
        "\n",
        "        return self.X, self.y\n",
        "\n",
        "    def split_data(self, test_size=0.2, random_state=42):\n",
        "        \"\"\"Split the data into training and testing sets.\"\"\"\n",
        "        # Added check to prevent error if X or y are None\n",
        "        if self.X is None or self.y is None:\n",
        "            print(\"Data not preprocessed. Cannot split data.\")\n",
        "            return None, None, None, None\n",
        "\n",
        "        self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(\n",
        "            self.X, self.y, test_size=test_size, random_state=random_state, stratify=self.y\n",
        "        )\n",
        "\n",
        "        print(f\"Training set shape: {self.X_train.shape}\")\n",
        "        print(f\"Testing set shape: {self.X_test.shape}\")\n",
        "\n",
        "        # Scale the features\n",
        "        self.scaler = StandardScaler()\n",
        "        self.X_train_scaled = self.scaler.fit_transform(self.X_train)\n",
        "        self.X_test_scaled = self.scaler.transform(self.X_test)\n",
        "\n",
        "        return self.X_train, self.X_test, self.y_train, self.y_test\n",
        "\n",
        "    def balance_data(self):\n",
        "        \"\"\"Apply SMOTE to balance the dataset.\"\"\"\n",
        "        # Added check to prevent error if training data is None\n",
        "        if self.X_train_scaled is None or self.y_train is None:\n",
        "            print(\"Training data not split or scaled. Cannot balance data.\")\n",
        "            return None, None\n",
        "\n",
        "        smote = SMOTE(random_state=42)\n",
        "        self.X_train_balanced, self.y_train_balanced = smote.fit_resample(self.X_train_scaled, self.y_train)\n",
        "\n",
        "        print(f\"Original training set fraud distribution:\")\n",
        "        print(self.y_train.value_counts())\n",
        "        print(f\"\\nBalanced training set fraud distribution:\")\n",
        "        print(pd.Series(self.y_train_balanced).value_counts())\n",
        "\n",
        "        return self.X_train_balanced, self.y_train_balanced\n",
        "\n",
        "    def train_models(self):\n",
        "        \"\"\"Train multiple machine learning models.\"\"\"\n",
        "        # Added check to prevent error if scaled data is None\n",
        "        if self.X_train_scaled is None or self.y_train is None or self.X_test_scaled is None or self.y_test is None:\n",
        "             print(\"Data not split or scaled. Cannot train models.\")\n",
        "             return\n",
        "\n",
        "        # Define models\n",
        "        self.models = {\n",
        "            'Logistic Regression': LogisticRegression(random_state=42, max_iter=1000),\n",
        "            'Random Forest': RandomForestClassifier(random_state=42, n_estimators=100),\n",
        "            'Gradient Boosting': GradientBoostingClassifier(random_state=42, n_estimators=100),\n",
        "            'SVM': SVC(random_state=42, probability=True)\n",
        "        }\n",
        "\n",
        "        # Train models\n",
        "        for name, model in self.models.items():\n",
        "            print(f\"\\nTraining {name}...\")\n",
        "\n",
        "            # Use balanced data for training if available, otherwise use scaled training data\n",
        "            X_train_fit = self.X_train_balanced if hasattr(self, 'X_train_balanced') and self.X_train_balanced is not None else self.X_train_scaled\n",
        "            y_train_fit = self.y_train_balanced if hasattr(self, 'y_train_balanced') and self.y_train_balanced is not None else self.y_train\n",
        "\n",
        "            if X_train_fit is None or y_train_fit is None:\n",
        "                 print(f\"Skipping training for {name} due to missing training data.\")\n",
        "                 continue\n",
        "\n",
        "            model.fit(X_train_fit, y_train_fit)\n",
        "\n",
        "            # Make predictions\n",
        "            y_pred = model.predict(self.X_test_scaled)\n",
        "            y_pred_proba = model.predict_proba(self.X_test_scaled)[:, 1]\n",
        "\n",
        "            # Store results\n",
        "            self.results[name] = {\n",
        "                'model': model,\n",
        "                'predictions': y_pred,\n",
        "                'probabilities': y_pred_proba,\n",
        "                'accuracy': model.score(self.X_test_scaled, self.y_test),\n",
        "                'auc_score': roc_auc_score(self.y_test, y_pred_proba)\n",
        "            }\n",
        "\n",
        "            print(f\"{name} Accuracy: {self.results[name]['accuracy']:.4f}\")\n",
        "            print(f\"{name} AUC Score: {self.results[name]['auc_score']:.4f}\")\n",
        "\n",
        "    def evaluate_models(self):\n",
        "        \"\"\"Evaluate all trained models.\"\"\"\n",
        "        if not self.results or self.y_test is None or self.X_test_scaled is None:\n",
        "            print(\"No models trained or test data is missing. Cannot evaluate models.\")\n",
        "            return\n",
        "\n",
        "        plt.figure(figsize=(15, 10))\n",
        "\n",
        "        # Plot ROC curves\n",
        "        plt.subplot(2, 2, 1)\n",
        "        for name, result in self.results.items():\n",
        "            # Check if probabilities are available for ROC curve\n",
        "            if 'probabilities' in result:\n",
        "                fpr, tpr, _ = roc_curve(self.y_test, result['probabilities'])\n",
        "                plt.plot(fpr, tpr, label=f\"{name} (AUC = {result['auc_score']:.3f})\")\n",
        "            else:\n",
        "                 print(f\"Probabilities not available for {name}, skipping ROC curve.\")\n",
        "        plt.plot([0, 1], [0, 1], 'k--')\n",
        "        plt.xlim([0.0, 1.0])\n",
        "        plt.ylim([0.0, 1.05])\n",
        "        plt.xlabel('False Positive Rate')\n",
        "        plt.ylabel('True Positive Rate')\n",
        "        plt.title('ROC Curves')\n",
        "        plt.legend()\n",
        "\n",
        "        # Plot Precision-Recall curves\n",
        "        plt.subplot(2, 2, 2)\n",
        "        for name, result in self.results.items():\n",
        "             # Check if probabilities are available for Precision-Recall curve\n",
        "            if 'probabilities' in result:\n",
        "                precision, recall, _ = precision_recall_curve(self.y_test, result['probabilities'])\n",
        "                plt.plot(recall, precision, label=f\"{name}\")\n",
        "            else:\n",
        "                 print(f\"Probabilities not available for {name}, skipping Precision-Recall curve.\")\n",
        "        plt.xlabel('Recall')\n",
        "        plt.ylabel('Precision')\n",
        "        plt.title('Precision-Recall Curves')\n",
        "        plt.legend()\n",
        "\n",
        "        # Compare accuracies\n",
        "        plt.subplot(2, 2, 3)\n",
        "        # Filter out models that might not have results if training was skipped\n",
        "        valid_results = {name: result for name, result in self.results.items() if 'accuracy' in result}\n",
        "        if valid_results:\n",
        "            accuracies = [result['accuracy'] for result in valid_results.values()]\n",
        "            model_names = list(valid_results.keys())\n",
        "            bars = plt.bar(model_names, accuracies)\n",
        "            plt.ylabel('Accuracy')\n",
        "            plt.title('Model Accuracies')\n",
        "            plt.xticks(rotation=45)\n",
        "\n",
        "            # Add value labels on bars\n",
        "            for bar, acc in zip(bars, accuracies):\n",
        "                plt.text(bar.get_x() + bar.get_width()/2., bar.get_height() + 0.001,\n",
        "                        f'{acc:.3f}', ha='center', va='bottom')\n",
        "        else:\n",
        "            plt.text(0.5, 0.5, 'No models evaluated', horizontalalignment='center', verticalalignment='center', transform=plt.gca().transAxes)\n",
        "            plt.title('Model Accuracies')\n",
        "\n",
        "\n",
        "        # Compare AUC scores\n",
        "        plt.subplot(2, 2, 4)\n",
        "        # Filter out models that might not have results if training was skipped\n",
        "        valid_results = {name: result for name, result in self.results.items() if 'auc_score' in result}\n",
        "        if valid_results:\n",
        "            auc_scores = [result['auc_score'] for result in valid_results.values()]\n",
        "            model_names = list(valid_results.keys())\n",
        "            bars = plt.bar(model_names, auc_scores)\n",
        "            plt.ylabel('AUC Score')\n",
        "            plt.title('Model AUC Scores')\n",
        "            plt.xticks(rotation=45)\n",
        "\n",
        "            # Add value labels on bars\n",
        "            for bar, auc in zip(bars, auc_scores):\n",
        "                plt.text(bar.get_x() + bar.get_width()/2., bar.get_height() + 0.001,\n",
        "                        f'{auc:.3f}', ha='center', va='bottom')\n",
        "        else:\n",
        "             plt.text(0.5, 0.5, 'No models evaluated', horizontalalignment='center', verticalalignment='center', transform=plt.gca().transAxes)\n",
        "             plt.title('Model AUC Scores')\n",
        "\n",
        "\n",
        "        plt.tight_layout()\n",
        "        plt.show()\n",
        "\n",
        "        # Print detailed classification reports\n",
        "        print(\"\\n=== DETAILED MODEL EVALUATION ===\")\n",
        "        for name, result in self.results.items():\n",
        "             if 'predictions' in result:\n",
        "                print(f\"\\n{name} Classification Report:\")\n",
        "                print(classification_report(self.y_test, result['predictions']))\n",
        "\n",
        "                print(f\"\\n{name} Confusion Matrix:\")\n",
        "                cm = confusion_matrix(self.y_test, result['predictions'])\n",
        "                sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n",
        "                plt.title(f'{name} Confusion Matrix')\n",
        "                plt.ylabel('Actual')\n",
        "                plt.xlabel('Predicted')\n",
        "                plt.show()\n",
        "             else:\n",
        "                 print(f\"Skipping detailed report for {name} due to missing predictions.\")\n",
        "\n",
        "\n",
        "    def hyperparameter_tuning(self, model_name='Random Forest'):\n",
        "        \"\"\"Perform hyperparameter tuning for the best model.\"\"\"\n",
        "        # Added check to prevent error if scaled data is None\n",
        "        if self.X_train_scaled is None or self.y_train is None or self.X_test_scaled is None or self.y_test is None:\n",
        "            print(\"Data not split or scaled. Cannot perform hyperparameter tuning.\")\n",
        "            return None\n",
        "\n",
        "        print(f\"\\nPerforming hyperparameter tuning for {model_name}...\")\n",
        "\n",
        "        if model_name == 'Random Forest':\n",
        "            param_grid = {\n",
        "                'n_estimators': [100, 200, 300],\n",
        "                'max_depth': [10, 20, None],\n",
        "                'min_samples_split': [2, 5, 10],\n",
        "                'min_samples_leaf': [1, 2, 4]\n",
        "            }\n",
        "            model = RandomForestClassifier(random_state=42)\n",
        "        elif model_name == 'Gradient Boosting':\n",
        "            param_grid = {\n",
        "                'n_estimators': [100, 200, 300],\n",
        "                'learning_rate': [0.01, 0.1, 0.2],\n",
        "                'max_depth': [3, 5, 7],\n",
        "                'min_samples_split': [2, 5, 10]\n",
        "            }\n",
        "            model = GradientBoostingClassifier(random_state=42)\n",
        "        else:\n",
        "            print(f\"Hyperparameter tuning not implemented for {model_name}\")\n",
        "            return None\n",
        "\n",
        "        # Perform grid search\n",
        "        grid_search = GridSearchCV(\n",
        "            model, param_grid, cv=5, scoring='roc_auc', n_jobs=-1, verbose=1\n",
        "        )\n",
        "\n",
        "        # Use balanced data for tuning if available, otherwise use scaled training data\n",
        "        X_train_tune = self.X_train_balanced if hasattr(self, 'X_train_balanced') and self.X_train_balanced is not None else self.X_train_scaled\n",
        "        y_train_tune = self.y_train_balanced if hasattr(self, 'y_train_balanced') and self.y_train_balanced is not None else self.y_train\n",
        "\n",
        "        if X_train_tune is None or y_train_tune is None:\n",
        "             print(\"Training data not available for tuning.\")\n",
        "             return None\n",
        "\n",
        "        grid_search.fit(X_train_tune, y_train_tune)\n",
        "\n",
        "        print(f\"Best parameters: {grid_search.best_params_}\")\n",
        "        print(f\"Best cross-validation score: {grid_search.best_score_:.4f}\")\n",
        "\n",
        "        # Evaluate best model\n",
        "        best_model = grid_search.best_estimator_\n",
        "        y_pred = best_model.predict(self.X_test_scaled)\n",
        "        y_pred_proba = best_model.predict_proba(self.X_test_scaled)[:, 1]\n",
        "\n",
        "        print(f\"Test accuracy: {best_model.score(self.X_test_scaled, self.y_test):.4f}\")\n",
        "        print(f\"Test AUC score: {roc_auc_score(self.y_test, y_pred_proba):.4f}\")\n",
        "\n",
        "        return grid_search.best_estimator_\n",
        "\n",
        "    def feature_importance(self, model_name='Random Forest'):\n",
        "        \"\"\"Analyze feature importance.\"\"\"\n",
        "        if model_name not in self.results or self.X is None:\n",
        "            print(f\"{model_name} not found in results or features are missing. Please train the model and ensure preprocessing was successful first.\")\n",
        "            return\n",
        "\n",
        "        model = self.results[model_name]['model']\n",
        "\n",
        "        # Get feature importance\n",
        "        if hasattr(model, 'feature_importances_'):\n",
        "            importance = model.feature_importances_\n",
        "            feature_names = self.X.columns\n",
        "\n",
        "            # Create DataFrame for feature importance\n",
        "            feature_importance_df = pd.DataFrame({\n",
        "                'feature': feature_names,\n",
        "                'importance': importance\n",
        "            }).sort_values('importance', ascending=False)\n",
        "\n",
        "            # Plot top 20 features\n",
        "            plt.figure(figsize=(10, 8))\n",
        "            top_features = feature_importance_df.head(20)\n",
        "            sns.barplot(data=top_features, x='importance', y='feature')\n",
        "            plt.title(f'Top 20 Feature Importance - {model_name}')\n",
        "            plt.xlabel('Importance')\n",
        "            plt.tight_layout()\n",
        "            plt.show()\n",
        "\n",
        "            print(f\"\\nTop 10 Most Important Features for {model_name}:\")\n",
        "            print(feature_importance_df.head(10))\n",
        "\n",
        "            return feature_importance_df\n",
        "        else:\n",
        "            print(f\"{model_name} does not have feature_importances_ attribute\")\n",
        "            return None\n",
        "\n",
        "    def predict_new_data(self, new_data, model_name='Random Forest'):\n",
        "        \"\"\"Make predictions on new data.\"\"\"\n",
        "        if model_name not in self.results or self.scaler is None:\n",
        "            print(f\"{model_name} not found in results or scaler is missing. Please train the model and scale the data first.\")\n",
        "            return None\n",
        "\n",
        "        model = self.results[model_name]['model']\n",
        "\n",
        "        # Preprocess new data (you'll need to implement the same preprocessing)\n",
        "        # This is a simplified version - in practice, you'd need the full preprocessing pipeline\n",
        "        # Note: This part is incomplete and assumes new_data has the same columns as self.X before scaling\n",
        "        # A proper implementation would involve replicating the preprocessing steps from preprocess_data\n",
        "        try:\n",
        "            new_data_scaled = self.scaler.transform(new_data)\n",
        "        except Exception as e:\n",
        "            print(f\"Error scaling new data: {e}\")\n",
        "            print(\"Please ensure new_data has the same columns as the training data used for scaling.\")\n",
        "            return None\n",
        "\n",
        "        # Make predictions\n",
        "        predictions = model.predict(new_data_scaled)\n",
        "        probabilities = model.predict_proba(new_data_scaled)[:, 1]\n",
        "\n",
        "        results_df = pd.DataFrame({\n",
        "            'Is_Fraud': predictions,\n",
        "            'Fraud_Probability': probabilities\n",
        "        })\n",
        "\n",
        "        return results_df\n",
        "\n",
        "    def run_complete_pipeline(self):\n",
        "        \"\"\"Run the complete fraud detection pipeline.\"\"\"\n",
        "        print(\"=== STARTING FRAUD DETECTION PIPELINE ===\")\n",
        "\n",
        "        # Load data\n",
        "        print(\"\\n1. Loading data...\")\n",
        "        if self.load_data() is None:\n",
        "            print(\"Data loading failed. Aborting pipeline.\")\n",
        "            return None # Stop if data loading fails\n",
        "\n",
        "        # Explore data\n",
        "        print(\"\\n2. Exploring data...\")\n",
        "        self.explore_data()\n",
        "\n",
        "        # Visualize data\n",
        "        print(\"\\n3. Visualizing data...\")\n",
        "        self.visualize_data() # visualize_data now has a check for self.df\n",
        "\n",
        "        # Preprocess data\n",
        "        print(\"\\n4. Preprocessing data...\")\n",
        "        X, y = self.preprocess_data()\n",
        "        if X is None or y is None:\n",
        "            print(\"Data preprocessing failed. Aborting pipeline.\")\n",
        "            return None\n",
        "\n",
        "        # Split data\n",
        "        print(\"\\n5. Splitting data...\")\n",
        "        X_train, X_test, y_train, y_test = self.split_data()\n",
        "        if X_train is None: # Check if split was successful\n",
        "             print(\"Data splitting failed. Aborting pipeline.\")\n",
        "             return None\n",
        "\n",
        "\n",
        "        # Balance data\n",
        "        print(\"\\n6. Balancing data...\")\n",
        "        X_train_balanced, y_train_balanced = self.balance_data()\n",
        "        # Balancing might fail or not be necessary, pipeline can continue\n",
        "\n",
        "        # Train models\n",
        "        print(\"\\n7. Training models...\")\n",
        "        self.train_models()\n",
        "        if not self.results: # Check if any models were trained\n",
        "             print(\"Model training failed. Aborting evaluation and subsequent steps.\")\n",
        "             return None\n",
        "\n",
        "\n",
        "        # Evaluate models\n",
        "        print(\"\\n8. Evaluating models...\")\n",
        "        self.evaluate_models()\n",
        "\n",
        "        # Feature importance\n",
        "        print(\"\\n9. Analyzing feature importance...\")\n",
        "        self.feature_importance()\n",
        "\n",
        "        # Hyperparameter tuning\n",
        "        print(\"\\n10. Hyperparameter tuning...\")\n",
        "        # Decide which model to tune, e.g., based on AUC score from results\n",
        "        best_model_name = max(self.results, key=lambda name: self.results[name]['auc_score']) if self.results else 'Random Forest'\n",
        "        best_model = self.hyperparameter_tuning(model_name=best_model_name)\n",
        "\n",
        "\n",
        "        print(\"\\n=== PIPELINE COMPLETED ===\")\n",
        "        return best_model\n",
        "\n",
        "# Example usage\n",
        "if __name__ == \"__main__\":\n",
        "    # Initialize the pipeline\n",
        "    # Make sure 'dataset.csv' exists in the same directory or provide the correct path\n",
        "    fraud_detector = FraudDetectionPipeline('dataset.csv')\n",
        "\n",
        "    # Run the complete pipeline\n",
        "    best_model = fraud_detector.run_complete_pipeline()\n",
        "\n",
        "    # You can also run individual steps:\n",
        "    # fraud_detector.load_data()\n",
        "    # fraud_detector.explore_data()\n",
        "    # fraud_detector.visualize_data()\n",
        "    # fraud_detector.preprocess_data()\n",
        "    # fraud_detector.split_data()\n",
        "    # fraud_detector.balance_data()\n",
        "    # fraud_detector.train_models()\n",
        "    # fraud_detector.evaluate_models()\n",
        "    # fraud_detector.feature_importance()\n",
        "    # fraud_detector.hyperparameter_tuning()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5PwHBR0ESNwp",
        "outputId": "da47214a-e220-45f7-d91a-d783d9ff66fe"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "=== STARTING FRAUD DETECTION PIPELINE ===\n",
            "\n",
            "1. Loading data...\n",
            "Error: Dataset not found at dataset.csv\n",
            "Data loading failed. Aborting pipeline.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from datetime import datetime\n",
        "import warnings\n",
        "\n",
        "# Set style for better visualizations\n",
        "plt.style.use('seaborn-v0_8')\n",
        "sns.set_palette(\"husl\")\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "# Configure plotting parameters\n",
        "plt.rcParams['figure.figsize'] = (12, 8)\n",
        "plt.rcParams['font.size'] = 10\n",
        "\n",
        "# 1. DATA LOADING AND BASIC INFORMATION\n",
        "print(\"=\" * 50)\n",
        "print(\"FRAUD DETECTION DATASET - EXPLORATORY DATA ANALYSIS\")\n",
        "print(\"=\" * 50)\n",
        "\n",
        "# Load the dataset\n",
        "df = pd.read_csv('dataset.csv.csv')\n",
        "\n",
        "print(\"\\n1. BASIC DATASET INFORMATION\")\n",
        "print(\"-\" * 30)\n",
        "print(f\"Dataset shape: {df.shape}\")\n",
        "print(f\"Number of rows: {df.shape[0]}\")\n",
        "print(f\"Number of columns: {df.shape[1]}\")\n",
        "\n",
        "# Display basic info\n",
        "print(\"\\n2. DATA TYPES AND BASIC INFO\")\n",
        "print(\"-\" * 30)\n",
        "print(df.info())\n",
        "\n",
        "print(\"\\n3. FIRST FEW ROWS\")\n",
        "print(\"-\" * 30)\n",
        "print(df.head())\n",
        "\n",
        "print(\"\\n4. BASIC STATISTICS\")\n",
        "print(\"-\" * 30)\n",
        "print(df.describe())\n",
        "\n",
        "# 5. MISSING VALUES ANALYSIS\n",
        "print(\"\\n5. MISSING VALUES\")\n",
        "print(\"-\" * 30)\n",
        "missing_values = df.isnull().sum()\n",
        "missing_percentage = (missing_values / len(df)) * 100\n",
        "missing_df = pd.DataFrame({\n",
        "    'Column': missing_values.index,\n",
        "    'Missing Count': missing_values.values,\n",
        "    'Missing Percentage': missing_percentage.values\n",
        "}).sort_values('Missing Count', ascending=False)\n",
        "print(missing_df)\n",
        "\n",
        "# 6. DATA PREPROCESSING\n",
        "print(\"\\n6. DATA PREPROCESSING\")\n",
        "print(\"-\" * 30)\n",
        "\n",
        "# Convert TransactionTime to datetime\n",
        "df['TransactionTime'] = pd.to_datetime(df['TransactionTime'])\n",
        "\n",
        "# Extract date and time features\n",
        "df['Date'] = df['TransactionTime'].dt.date\n",
        "df['Hour'] = df['TransactionTime'].dt.hour\n",
        "df['Day'] = df['TransactionTime'].dt.day\n",
        "df['Month'] = df['TransactionTime'].dt.month\n",
        "df['Year'] = df['TransactionTime'].dt.year\n",
        "df['DayOfWeek'] = df['TransactionTime'].dt.day_name()\n",
        "\n",
        "print(\"Added time-based features\")\n",
        "\n",
        "# 7. FRAUD ANALYSIS\n",
        "print(\"\\n7. FRAUD ANALYSIS\")\n",
        "print(\"-\" * 30)\n",
        "\n",
        "# Overall fraud rate\n",
        "fraud_rate = df['IsFraud'].mean()\n",
        "print(f\"Overall fraud rate: {fraud_rate:.2%}\")\n",
        "\n",
        "# Fraud counts\n",
        "fraud_counts = df['IsFraud'].value_counts()\n",
        "print(f\"\\nFraud distribution:\")\n",
        "print(fraud_counts)\n",
        "\n",
        "# 8. VISUALIZATIONS\n",
        "print(\"\\n8. CREATING VISUALIZATIONS\")\n",
        "print(\"-\" * 30)\n",
        "\n",
        "# Create a figure with multiple subplots\n",
        "fig = plt.figure(figsize=(20, 24))\n",
        "\n",
        "# 8.1 Fraud Distribution Pie Chart\n",
        "plt.subplot(4, 3, 1)\n",
        "plt.pie(fraud_counts.values, labels=['Legitimate', 'Fraudulent'], autopct='%1.1f%%',\n",
        "        colors=['lightgreen', 'lightcoral'], startangle=90)\n",
        "plt.title('Fraud vs Legitimate Transactions', fontsize=14, fontweight='bold')\n",
        "\n",
        "# 8.2 Amount Distribution by Fraud Status\n",
        "plt.subplot(4, 3, 2)\n",
        "sns.boxplot(data=df, x='IsFraud', y='Amount', palette=['lightgreen', 'lightcoral'])\n",
        "plt.title('Transaction Amount Distribution by Fraud Status', fontsize=14, fontweight='bold')\n",
        "plt.xlabel('Is Fraud (0=No, 1=Yes)')\n",
        "plt.ylabel('Amount')\n",
        "\n",
        "# 8.3 Fraud by Category\n",
        "plt.subplot(4, 3, 3)\n",
        "fraud_by_category = df.groupby('Category')['IsFraud'].agg(['count', 'sum', 'mean']).sort_values('mean', ascending=False)\n",
        "plt.barh(fraud_by_category.index, fraud_by_category['mean'])\n",
        "plt.title('Fraud Rate by Category', fontsize=14, fontweight='bold')\n",
        "plt.xlabel('Fraud Rate')\n",
        "\n",
        "# 8.4 Transactions by Hour\n",
        "plt.subplot(4, 3, 4)\n",
        "hourly_fraud = df.groupby('Hour')['IsFraud'].agg(['count', 'sum']).reset_index()\n",
        "plt.plot(hourly_fraud['Hour'], hourly_fraud['count'], marker='o', label='Total Transactions')\n",
        "plt.plot(hourly_fraud['Hour'], hourly_fraud['sum'], marker='s', label='Fraudulent Transactions', color='red')\n",
        "plt.title('Transactions by Hour of Day', fontsize=14, fontweight='bold')\n",
        "plt.xlabel('Hour')\n",
        "plt.ylabel('Number of Transactions')\n",
        "plt.legend()\n",
        "plt.grid(True, alpha=0.3)\n",
        "\n",
        "# 8.5 Fraud by Device Type\n",
        "plt.subplot(4, 3, 5)\n",
        "device_fraud = df.groupby('Device')['IsFraud'].mean()\n",
        "device_fraud.plot(kind='bar', color=['skyblue', 'orange'])\n",
        "plt.title('Fraud Rate by Device Type', fontsize=14, fontweight='bold')\n",
        "plt.ylabel('Fraud Rate')\n",
        "plt.xticks(rotation=45)\n",
        "\n",
        "# 8.6 Top 10 Merchants by Transaction Count\n",
        "plt.subplot(4, 3, 6)\n",
        "top_merchants = df['Merchant'].value_counts().head(10)\n",
        "top_merchants.plot(kind='barh')\n",
        "plt.title('Top 10 Merchants by Transaction Count', fontsize=14, fontweight='bold')\n",
        "plt.xlabel('Number of Transactions')\n",
        "\n",
        "# 8.7 Amount Distribution\n",
        "plt.subplot(4, 3, 7)\n",
        "plt.hist(df['Amount'], bins=50, alpha=0.7, color='skyblue', edgecolor='black')\n",
        "plt.title('Transaction Amount Distribution', fontsize=14, fontweight='bold')\n",
        "plt.xlabel('Amount')\n",
        "plt.ylabel('Frequency')\n",
        "\n",
        "# 8.8 Fraud by State/Location\n",
        "plt.subplot(4, 3, 8)\n",
        "df['State'] = df['Location'].str.split(',').str[1].str.strip()\n",
        "state_fraud = df.groupby('State')['IsFraud'].agg(['count', 'sum', 'mean']).sort_values('sum', ascending=False)\n",
        "top_states = state_fraud.head(10)\n",
        "plt.barh(top_states.index, top_states['sum'])\n",
        "plt.title('Fraudulent Transactions by State (Top 10)', fontsize=14, fontweight='bold')\n",
        "plt.xlabel('Number of Fraudulent Transactions')\n",
        "\n",
        "# 8.9 Daily Transaction Pattern\n",
        "plt.subplot(4, 3, 9)\n",
        "daily_pattern = df.groupby('Date')['IsFraud'].agg(['count', 'sum'])\n",
        "daily_pattern.index = pd.to_datetime(daily_pattern.index)\n",
        "plt.plot(daily_pattern.index, daily_pattern['count'], label='Total', marker='o')\n",
        "plt.plot(daily_pattern.index, daily_pattern['sum'], label='Fraudulent', marker='s', color='red')\n",
        "plt.title('Daily Transaction Pattern', fontsize=14, fontweight='bold')\n",
        "plt.xlabel('Date')\n",
        "plt.ylabel('Number of Transactions')\n",
        "plt.legend()\n",
        "plt.xticks(rotation=45)\n",
        "\n",
        "# 8.10 Day of Week Pattern\n",
        "plt.subplot(4, 3, 10)\n",
        "day_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n",
        "dow_fraud = df.groupby('DayOfWeek')['IsFraud'].agg(['count', 'sum', 'mean']).reindex(day_order)\n",
        "dow_fraud['mean'].plot(kind='bar', color='lightcoral')\n",
        "plt.title('Fraud Rate by Day of Week', fontsize=14, fontweight='bold')\n",
        "plt.ylabel('Fraud Rate')\n",
        "plt.xticks(rotation=45)\n",
        "\n",
        "# 8.11 User Transaction Count vs Fraud\n",
        "plt.subplot(4, 3, 11)\n",
        "user_stats = df.groupby('UserID').agg({\n",
        "    'TransactionID': 'count',\n",
        "    'IsFraud': 'sum'\n",
        "}).rename(columns={'TransactionID': 'Transaction_Count', 'IsFraud': 'Fraud_Count'})\n",
        "plt.scatter(user_stats['Transaction_Count'], user_stats['Fraud_Count'], alpha=0.6)\n",
        "plt.title('User Transaction Count vs Fraud Count', fontsize=14, fontweight='bold')\n",
        "plt.xlabel('Total Transactions')\n",
        "plt.ylabel('Fraudulent Transactions')\n",
        "\n",
        "# 8.12 Correlation Heatmap of Numerical Features\n",
        "plt.subplot(4, 3, 12)\n",
        "numerical_cols = ['Amount', 'Hour', 'Day', 'Month', 'IsFraud']\n",
        "correlation_matrix = df[numerical_cols].corr()\n",
        "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0,\n",
        "            square=True, linewidths=0.5)\n",
        "plt.title('Correlation Matrix', fontsize=14, fontweight='bold')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.savefig('fraud_analysis_dashboard.png', dpi=300, bbox_inches='tight')\n",
        "plt.show()\n",
        "\n",
        "# 9. DETAILED STATISTICAL ANALYSIS\n",
        "print(\"\\n9. DETAILED STATISTICAL ANALYSIS\")\n",
        "print(\"-\" * 30)\n",
        "\n",
        "# Fraud statistics by different categories\n",
        "print(\"\\n9.1 FRAUD STATISTICS BY CATEGORY\")\n",
        "category_stats = df.groupby('Category').agg({\n",
        "    'IsFraud': ['count', 'sum', 'mean'],\n",
        "    'Amount': 'mean'\n",
        "}).round(4)\n",
        "category_stats.columns = ['Total_Transactions', 'Fraudulent_Transactions', 'Fraud_Rate', 'Avg_Amount']\n",
        "print(category_stats.sort_values('Fraud_Rate', ascending=False))\n",
        "\n",
        "print(\"\\n9.2 FRAUD STATISTICS BY DEVICE\")\n",
        "device_stats = df.groupby('Device').agg({\n",
        "    'IsFraud': ['count', 'sum', 'mean'],\n",
        "    'Amount': 'mean'\n",
        "}).round(4)\n",
        "device_stats.columns = ['Total_Transactions', 'Fraudulent_Transactions', 'Fraud_Rate', 'Avg_Amount']\n",
        "print(device_stats.sort_values('Fraud_Rate', ascending=False))\n",
        "\n",
        "print(\"\\n9.3 HIGH-VALUE TRANSACTIONS ANALYSIS\")\n",
        "high_value_threshold = df['Amount'].quantile(0.9)\n",
        "print(f\"90th percentile threshold: ${high_value_threshold:.2f}\")\n",
        "\n",
        "high_value_fraud = df[df['Amount'] >= high_value_threshold]['IsFraud'].mean()\n",
        "all_fraud = df['IsFraud'].mean()\n",
        "print(f\"Fraud rate in high-value transactions: {high_value_fraud:.2%}\")\n",
        "print(f\"Overall fraud rate: {all_fraud:.2%}\")\n",
        "print(f\"Risk ratio (high-value / overall): {high_value_fraud / all_fraud:.2f}x\")\n",
        "\n",
        "print(\"\\n9.4 TIME-BASED ANALYSIS\")\n",
        "# Peak fraud hours\n",
        "fraud_by_hour = df.groupby('Hour')['IsFraud'].mean().sort_values(ascending=False)\n",
        "print(f\"Peak fraud hours:\")\n",
        "print(fraud_by_hour.head(5))\n",
        "\n",
        "# Suspicious patterns\n",
        "print(\"\\n9.5 POTENTIAL SUSPICIOUS PATTERNS\")\n",
        "# Multiple transactions by same user in short time\n",
        "df_sorted = df.sort_values(['UserID', 'TransactionTime'])\n",
        "df_sorted['TimeDiff'] = df_sorted.groupby('UserID')['TransactionTime'].diff().dt.total_seconds() / 60\n",
        "quick_transactions = df_sorted[df_sorted['TimeDiff'] <= 5].groupby('UserID').size()\n",
        "if len(quick_transactions) > 0:\n",
        "    print(f\"Users with multiple transactions within 5 minutes:\")\n",
        "    print(quick_transactions.sort_values(ascending=False).head(5))\n",
        "\n",
        "# 10. SUMMARY AND INSIGHTS\n",
        "print(\"\\n10. KEY INSIGHTS AND SUMMARY\")\n",
        "print(\"-\" * 30)\n",
        "print(f\"1. Overall fraud rate: {fraud_rate:.2%}\")\n",
        "print(f\"2. Total transactions analyzed: {len(df)}\")\n",
        "print(f\"3. Date range: {df['Date'].min()} to {df['Date'].max()}\")\n",
        "print(f\"4. Most fraudulent category: {category_stats.index[0]} ({category_stats['Fraud_Rate'].iloc[0]:.2%} fraud rate)\")\n",
        "print(f\"5. Average fraudulent transaction amount: ${df[df['IsFraud'] == 1]['Amount'].mean():.2f}\")\n",
        "print(f\"6. Average legitimate transaction amount: ${df[df['IsFraud'] == 0]['Amount'].mean():.2f}\")\n",
        "print(f\"7. Number of unique users: {df['UserID'].nunique()}\")\n",
        "print(f\"8. Number of unique merchants: {df['Merchant'].nunique()}\")\n",
        "\n",
        "# Save processed data\n",
        "df.to_csv('processed_fraud_data.csv', index=False)\n",
        "print(\"\\n11. PROCESSED DATA SAVED\")\n",
        "print(\"-\" * 30)\n",
        "print(\"Processed data saved as 'processed_fraud_data.csv'\")\n",
        "print(\"Analysis complete!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "PNmm5MB_TBG0",
        "outputId": "417221f9-8b37-4e73-8bd6-53d8d29891cb"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "==================================================\n",
            "FRAUD DETECTION DATASET - EXPLORATORY DATA ANALYSIS\n",
            "==================================================\n",
            "\n",
            "1. BASIC DATASET INFORMATION\n",
            "------------------------------\n",
            "Dataset shape: (53, 10)\n",
            "Number of rows: 53\n",
            "Number of columns: 10\n",
            "\n",
            "2. DATA TYPES AND BASIC INFO\n",
            "------------------------------\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 53 entries, 0 to 52\n",
            "Data columns (total 10 columns):\n",
            " #   Column           Non-Null Count  Dtype  \n",
            "---  ------           --------------  -----  \n",
            " 0   TransactionID    53 non-null     int64  \n",
            " 1   UserID           53 non-null     int64  \n",
            " 2   Amount           53 non-null     float64\n",
            " 3   TransactionTime  53 non-null     object \n",
            " 4   Merchant         53 non-null     object \n",
            " 5   Category         53 non-null     object \n",
            " 6   Location         53 non-null     object \n",
            " 7   Device           52 non-null     object \n",
            " 8   IPAddress        52 non-null     object \n",
            " 9   IsFraud          52 non-null     float64\n",
            "dtypes: float64(2), int64(2), object(6)\n",
            "memory usage: 4.3+ KB\n",
            "None\n",
            "\n",
            "3. FIRST FEW ROWS\n",
            "------------------------------\n",
            "   TransactionID  UserID  Amount      TransactionTime            Merchant  \\\n",
            "0              1     101   55.75  2023-01-01 10:30:00   Electronics Store   \n",
            "1              2     102  120.50  2023-01-01 10:45:15     Online Retailer   \n",
            "2              3     103   19.99  2023-01-01 11:00:30         Coffee Shop   \n",
            "3              4     104  310.20  2023-01-01 11:15:45  Luxury Goods Store   \n",
            "4              5     105   89.90  2023-01-01 11:30:00           Bookstore   \n",
            "\n",
            "          Category                Location  Device      IPAddress  IsFraud  \n",
            "0         Shopping  Coimbatore, Tamil Nadu  Mobile  192.168.1.100      0.0  \n",
            "1         Shopping     Chennai, Tamil Nadu     Web       10.0.0.5      0.0  \n",
            "2  Food & Beverage  Coimbatore, Tamil Nadu  Mobile     172.16.0.1      0.0  \n",
            "3         Shopping    Bangalore, Karnataka     Web  192.168.1.101      1.0  \n",
            "4            Books  Coimbatore, Tamil Nadu  Mobile       10.0.0.6      0.0  \n",
            "\n",
            "4. BASIC STATISTICS\n",
            "------------------------------\n",
            "       TransactionID      UserID      Amount    IsFraud\n",
            "count      53.000000   53.000000   53.000000  52.000000\n",
            "mean       27.000000  108.018868  144.525094   0.250000\n",
            "std        15.443445    5.066825  132.248067   0.437237\n",
            "min         1.000000  101.000000   15.250000   0.000000\n",
            "25%        14.000000  104.000000   48.750000   0.000000\n",
            "50%        27.000000  107.000000   89.900000   0.000000\n",
            "75%        40.000000  112.000000  195.800000   0.250000\n",
            "max        53.000000  118.000000  490.100000   1.000000\n",
            "\n",
            "5. MISSING VALUES\n",
            "------------------------------\n",
            "            Column  Missing Count  Missing Percentage\n",
            "9          IsFraud              1            1.886792\n",
            "8        IPAddress              1            1.886792\n",
            "7           Device              1            1.886792\n",
            "0    TransactionID              0            0.000000\n",
            "1           UserID              0            0.000000\n",
            "2           Amount              0            0.000000\n",
            "5         Category              0            0.000000\n",
            "4         Merchant              0            0.000000\n",
            "3  TransactionTime              0            0.000000\n",
            "6         Location              0            0.000000\n",
            "\n",
            "6. DATA PREPROCESSING\n",
            "------------------------------\n",
            "Added time-based features\n",
            "\n",
            "7. FRAUD ANALYSIS\n",
            "------------------------------\n",
            "Overall fraud rate: 25.00%\n",
            "\n",
            "Fraud distribution:\n",
            "IsFraud\n",
            "0.0    39\n",
            "1.0    13\n",
            "Name: count, dtype: int64\n",
            "\n",
            "8. CREATING VISUALIZATIONS\n",
            "------------------------------\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x2400 with 13 Axes>"
            ],"image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "9. DETAILED STATISTICAL ANALYSIS\n",
            "------------------------------\n",
            "\n",
            "9.1 FRAUD STATISTICS BY CATEGORY\n",
            "                        Total_Transactions  Fraudulent_Transactions  \\\n",
            "Category                                                              \n",
            "Home Goods                               1                      1.0   \n",
            "Luxury Goods                             5                      5.0   \n",
            "Travel                                   2                      2.0   \n",
            "Transportation                           3                      2.0   \n",
            "Shopping                                15                      3.0   \n",
            "Health & Personal Care                   4                      0.0   \n",
            "Groceries                                2                      0.0   \n",
            "Food & Beverage                          7                      0.0   \n",
            "Entertainment                            1                      0.0   \n",
            "Books                                    2                      0.0   \n",
            "Home Improvement                         2                      0.0   \n",
            "Other                                    6                      0.0   \n",
            "Personal Care                            2                      0.0   \n",
            "\n",
            "                        Fraud_Rate  Avg_Amount  \n",
            "Category                                        \n",
            "Home Goods                  1.0000    280.4000  \n",
            "Luxury Goods                1.0000    451.4500  \n",
            "Travel                      1.0000    303.0500  \n",
            "Transportation              0.6667    226.5333  \n",
            "Shopping                    0.2000    156.4860  \n",
            "Health & Personal Care      0.0000     75.6250  \n",
            "Groceries                   0.0000     58.1500  \n",
            "Food & Beverage             0.0000     54.4843  \n",
            "Entertainment               0.0000     72.9500  \n",
            "Books                       0.0000     59.3833  \n",
            "Home Improvement            0.0000     27.8250  \n",
            "Other                       0.0000     36.9500  \n",
            "Personal Care               0.0000     80.2750  \n",
            "\n",
            "9.2 FRAUD STATISTICS BY DEVICE\n",
            "        Total_Transactions  Fraudulent_Transactions  Fraud_Rate  Avg_Amount\n",
            "Device                                                                     \n",
            "Web                     26                     13.0         0.5    219.5385\n",
            "Mobile                  26                      0.0         0.0     73.3204\n",
            "\n",
            "9.3 HIGH-VALUE TRANSACTIONS ANALYSIS\n",
            "90th percentile threshold: $345.56\n",
            "Fraud rate in high-value transactions: 100.00%\n",
            "Overall fraud rate: 25.00%\n",
            "Risk ratio (high-value / overall): 4.00x\n",
            "\n",
            "9.4 TIME-BASED ANALYSIS\n",
            "Peak fraud hours:\n",
            "Hour\n",
            "17    0.50\n",
            "9     0.25\n",
            "11    0.25\n",
            "13    0.25\n",
            "12    0.25\n",
            "Name: IsFraud, dtype: float64\n",
            "\n",
            "9.5 POTENTIAL SUSPICIOUS PATTERNS\n",
            "\n",
            "10. KEY INSIGHTS AND SUMMARY\n",
            "------------------------------\n",
            "1. Overall fraud rate: 25.00%\n",
            "2. Total transactions analyzed: 53\n",
            "3. Date range: 2023-01-01 to 2023-01-03\n",
            "4. Most fraudulent category: Books (0.00% fraud rate)\n",
            "5. Average fraudulent transaction amount: $348.11\n",
            "6. Average legitimate transaction amount: $79.20\n",
            "7. Number of unique users: 18\n",
            "8. Number of unique merchants: 27\n",
            "\n",
            "11. PROCESSED DATA SAVED\n",
            "------------------------------\n",
            "Processed data saved as 'processed_fraud_data.csv'\n",
            "Analysis complete!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: give model building and evalution source code the dataset i have attached\n",
        "\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "# Example usage\n",
        "if __name__ == \"__main__\":\n",
        "    # Initialize the pipeline\n",
        "    # Make sure 'dataset.csv' exists in the same directory or provide the correct path\n",
        "    fraud_detector = FraudDetectionPipeline('dataset.csv.csv') # Corrected filename as per user's reference\n",
        "    def preprocess_data(self):\n",
        "        \"\"\"Preprocess the data for machine learning.\"\"\"\n",
        "        if self.df is None:\n",
        "             print(\"Data not loaded. Cannot perform preprocessing.\")\n",
        "             return None, None # Return None for X and y\n",
        "\n",
        "        # Create a copy of the dataframe\n",
        "        df_processed = self.df.copy()\n",
        "\n",
        "        # Convert TransactionTime to datetime\n",
        "        df_processed['TransactionTime'] = pd.to_datetime(df_processed['TransactionTime'])\n",
        "\n",
        "        # Extract time features\n",
        "        df_processed['Hour'] = df_processed['TransactionTime'].dt.hour\n",
        "        df_processed['DayOfWeek'] = df_processed['TransactionTime'].dt.dayofweek\n",
        "        df_processed['IsWeekend'] = (df_processed['DayOfWeek'] >= 5).astype(int)\n",
        "\n",
        "        # Extract IP address network parts\n",
        "        # Handle potential errors in IPAddress format\n",
        "        df_processed['IP_Network'] = df_processed['IPAddress'].str.split('.').str[0:2].str.join('.')\n",
        "\n",
        "\n",
        "        # Handle categorical variables\n",
        "        # Location features\n",
        "        # Added check for potential None values in split result\n",
        "        df_processed['City'] = df_processed['Location'].str.split(',').str[0].str.strip()\n",
        "        # Handle potential None values in location split\n",
        "        df_processed['State'] = df_processed['Location'].str.split(',').str[1].str.strip()\n",
        "\n",
        "\n",
        "        # Amount-based features\n",
        "        df_processed['Amount_Log'] = np.log1p(df_processed['Amount'])\n",
        "        df_processed['Amount_Squared'] = df_processed['Amount'] ** 2\n",
        "\n",
        "        # User behavior features\n",
        "        user_stats = df_processed.groupby('UserID').agg({\n",
        "            'Amount': ['mean', 'std', 'sum'],\n",
        "            'TransactionID': 'count'\n",
        "        }).reset_index()\n",
        "        user_stats.columns = ['UserID', 'User_Avg_Amount', 'User_Std_Amount', 'User_Total_Amount', 'User_Transaction_Count']\n",
        "\n",
        "        # Merge user statistics\n",
        "        df_processed = df_processed.merge(user_stats, on='UserID', how='left')\n",
        "\n",
        "        # Fill missing values for user statistics\n",
        "        df_processed['User_Std_Amount'] = df_processed['User_Std_Amount'].fillna(0)\n",
        "\n",
        "        # One-hot encode categorical variables\n",
        "        categorical_features = ['Merchant', 'Category', 'Device', 'City', 'State', 'IP_Network']\n",
        "        df_encoded = pd.get_dummies(df_processed, columns=categorical_features, drop_first=True)\n",
        "\n",
        "        # Select features for modeling\n",
        "        feature_columns = [col for col in df_encoded.columns if col not in ['TransactionID', 'UserID', 'TransactionTime', 'Location', 'IPAddress', 'IsFraud']]\n",
        "\n",
        "        self.X = df_encoded[feature_columns]\n",
        "        self.y = df_encoded['IsFraud']\n",
        "\n",
        "        # Handle any remaining missing values in features using median imputation\n",
        "        imputer = SimpleImputer(strategy='median')\n",
        "        self.X = pd.DataFrame(imputer.fit_transform(self.X), columns=self.X.columns)\n",
        "\n",
        "        # --- ADDED CODE TO HANDLE MISSING VALUES IN TARGET VARIABLE ---\n",
        "        # Combine X and y to easily drop rows with missing target\n",
        "        combined_df = pd.concat([self.X, self.y], axis=1)\n",
        "\n",
        "        # Drop rows where the target variable 'IsFraud' is NaN\n",
        "        initial_rows = len(combined_df)\n",
        "        combined_df.dropna(subset=['IsFraud'], inplace=True)\n",
        "        rows_dropped = initial_rows - len(combined_df)\n",
        "        if rows_dropped > 0:\n",
        "            print(f\"Dropped {rows_dropped} rows with missing values in the target variable 'IsFraud'.\")\n",
        "\n",
        "        # Separate X and y again\n",
        "        self.X = combined_df.drop('IsFraud', axis=1)\n",
        "        self.y = combined_df['IsFraud']\n",
        "        # --- END OF ADDED CODE ---\n",
        "\n",
        "\n",
        "        print(f\"Feature matrix shape after processing: {self.X.shape}\")\n",
        "        print(f\"Target variable shape after processing: {self.y.shape}\")\n",
        "        print(f\"Number of features: {len(self.X.columns)}\") # Use self.X.columns for actual feature count\n",
        "\n",
        "        return self.X, self.y\n",
        "\n",
        "    # After the pipeline runs, the best_model variable holds the best model found by hyperparameter tuning.\n",
        "    # You can now use this model for further analysis or prediction.\n",
        "    if best_model:\n",
        "        print(\"\\nBest model from hyperparameter tuning:\")\n",
        "        print(best_model)\n",
        "\n",
        "        # Example: Analyze feature importance for the tuned model\n",
        "        print(\"\\nAnalyzing Feature Importance for the Best Tuned Model:\")\n",
        "        if hasattr(best_model, 'feature_importances_'):\n",
        "             feature_importance_df = pd.DataFrame({\n",
        "                'feature': fraud_detector.X.columns, # Use columns from preprocessed data\n",
        "                'importance': best_model.feature_importances_\n",
        "            }).sort_values('importance', ascending=False)\n",
        "\n",
        "             # Plot top 20 features\n",
        "             plt.figure(figsize=(10, 8))\n",
        "             top_features = feature_importance_df.head(20)\n",
        "             sns.barplot(data=top_features, x='importance', y='feature')\n",
        "             plt.title(f'Top 20 Feature Importance - Tuned {type(best_model).__name__}')\n",
        "             plt.xlabel('Importance')\n",
        "             plt.tight_layout()\n",
        "             plt.show()\n",
        "\n",
        "             print(f\"\\nTop 10 Most Important Features for Tuned {type(best_model).__name__}:\")\n",
        "             print(feature_importance_df.head(10))\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "VGeVDBvzUL54"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 330
        },
        "id": "SekW5N2iPTqA",
        "outputId": "2e155d83-4456-48f4-bb08-4e7ec5c1ce21"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   TransactionID  UserID  Amount     TransactionTime            Merchant  \\\n",
              "0              1     101   55.75 2023-01-01 10:30:00   Electronics Store   \n",
              "1              2     102  120.50 2023-01-01 10:45:15     Online Retailer   \n",
              "2              3     103   19.99 2023-01-01 11:00:30         Coffee Shop   \n",
              "3              4     104  310.20 2023-01-01 11:15:45  Luxury Goods Store   \n",
              "4              5     105   89.90 2023-01-01 11:30:00           Bookstore   \n",
              "\n",
              "          Category                Location  Device      IPAddress  IsFraud  \\\n",
              "0         Shopping  Coimbatore, Tamil Nadu  Mobile  192.168.1.100      0.0   \n",
              "1         Shopping     Chennai, Tamil Nadu     Web       10.0.0.5      0.0   \n",
              "2  Food & Beverage  Coimbatore, Tamil Nadu  Mobile     172.16.0.1      0.0   \n",
              "3         Shopping    Bangalore, Karnataka     Web  192.168.1.101      1.0   \n",
              "4            Books  Coimbatore, Tamil Nadu  Mobile       10.0.0.6      0.0   \n",
              "\n",
              "         Date  Hour  Day  Month  Year DayOfWeek       State  \n",
              "0  2023-01-01    10    1      1  2023    Sunday  Tamil Nadu  \n",
              "1  2023-01-01    10    1      1  2023    Sunday  Tamil Nadu  \n",
              "2  2023-01-01    11    1      1  2023    Sunday  Tamil Nadu  \n",
              "3  2023-01-01    11    1      1  2023    Sunday   Karnataka  \n",
              "4  2023-01-01    11    1      1  2023    Sunday  Tamil Nadu  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2fdb4014-1228-4194-ae58-d1d9a5d0eab9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>TransactionID</th>\n",
              "      <th>UserID</th>\n",
              "      <th>Amount</th>\n",
              "      <th>TransactionTime</th>\n",
              "      <th>Merchant</th>\n",
              "      <th>Category</th>\n",
              "      <th>Location</th>\n",
              "      <th>Device</th>\n",
              "      <th>IPAddress</th>\n",
              "      <th>IsFraud</th>\n",
              "      <th>Date</th>\n",
              "      <th>Hour</th>\n",
              "      <th>Day</th>\n",
              "      <th>Month</th>\n",
              "      <th>Year</th>\n",
              "      <th>DayOfWeek</th>\n",
              "      <th>State</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>101</td>\n",
              "      <td>55.75</td>\n",
              "      <td>2023-01-01 10:30:00</td>\n",
              "      <td>Electronics Store</td>\n",
              "      <td>Shopping</td>\n",
              "      <td>Coimbatore, Tamil Nadu</td>\n",
              "      <td>Mobile</td>\n",
              "      <td>192.168.1.100</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2023-01-01</td>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2023</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>Tamil Nadu</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>102</td>\n",
              "      <td>120.50</td>\n",
              "      <td>2023-01-01 10:45:15</td>\n",
              "      <td>Online Retailer</td>\n",
              "      <td>Shopping</td>\n",
              "      <td>Chennai, Tamil Nadu</td>\n",
              "      <td>Web</td>\n",
              "      <td>10.0.0.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2023-01-01</td>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2023</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>Tamil Nadu</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>103</td>\n",
              "      <td>19.99</td>\n",
              "      <td>2023-01-01 11:00:30</td>\n",
              "      <td>Coffee Shop</td>\n",
              "      <td>Food &amp; Beverage</td>\n",
              "      <td>Coimbatore, Tamil Nadu</td>\n",
              "      <td>Mobile</td>\n",
              "      <td>172.16.0.1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2023-01-01</td>\n",
              "      <td>11</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2023</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>Tamil Nadu</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>104</td>\n",
              "      <td>310.20</td>\n",
              "      <td>2023-01-01 11:15:45</td>\n",
              "      <td>Luxury Goods Store</td>\n",
              "      <td>Shopping</td>\n",
              "      <td>Bangalore, Karnataka</td>\n",
              "      <td>Web</td>\n",
              "      <td>192.168.1.101</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2023-01-01</td>\n",
              "      <td>11</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2023</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>Karnataka</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>105</td>\n",
              "      <td>89.90</td>\n",
              "      <td>2023-01-01 11:30:00</td>\n",
              "      <td>Bookstore</td>\n",
              "      <td>Books</td>\n",
              "      <td>Coimbatore, Tamil Nadu</td>\n",
              "      <td>Mobile</td>\n",
              "      <td>10.0.0.6</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2023-01-01</td>\n",
              "      <td>11</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2023</td>\n",
              "      <td>Sunday</td>\n",
              "      <td>Tamil Nadu</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2fdb4014-1228-4194-ae58-d1d9a5d0eab9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2fdb4014-1228-4194-ae58-d1d9a5d0eab9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2fdb4014-1228-4194-ae58-d1d9a5d0eab9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-d9a815eb-86a9-4e94-910b-a9d5f801ed71\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d9a815eb-86a9-4e94-910b-a9d5f801ed71')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-d9a815eb-86a9-4e94-910b-a9d5f801ed71 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 53,\n  \"fields\": [\n    {\n      \"column\": \"TransactionID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15,\n        \"min\": 1,\n        \"max\": 53,\n        \"num_unique_values\": 53,\n        \"samples\": [\n          20,\n          42,\n          48\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"UserID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 101,\n        \"max\": 118,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          101,\n          102,\n          109\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 132.24806740804954,\n        \"min\": 15.25,\n        \"max\": 490.1,\n        \"num_unique_values\": 53,\n        \"samples\": [\n          450.0,\n          155.75,\n          490.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TransactionTime\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2023-01-01 10:30:00\",\n        \"max\": \"2023-01-03 15:00:00\",\n        \"num_unique_values\": 53,\n        \"samples\": [\n          \"2023-01-01 15:15:45\",\n          \"2023-01-02 12:15:15\",\n          \"2023-01-02 13:45:45\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Merchant\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 27,\n        \"samples\": [\n          \"Convenience Store\",\n          \"Gas Station\",\n          \"Clothing Store\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"Home Improvement\",\n          \"Home Goods\",\n          \"Shopping\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Location\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"Lucknow, Uttar Pradesh\",\n          \"Kanpur, Uttar Pradesh\",\n          \"Coimbatore, Tamil Nadu\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Device\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Web\",\n          \"Mobile\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IPAddress\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 52,\n        \"samples\": [\n          \"10.0.0.11\",\n          \"172.16.0.14\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IsFraud\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4372373160976031,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2023-01-01\",\n        \"max\": \"2023-01-03\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"2023-01-01\",\n          \"2023-01-02\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Hour\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          17,\n          11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Day\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Month\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2023\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DayOfWeek\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Sunday\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"State\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Rajasthan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "DATA_FILE_PATH = 'dataset.csv.csv'\n",
        "\n",
        "# Check if the file exists after uploading or if it's already in the environment\n",
        "try:\n",
        "    with open(DATA_FILE_PATH, 'r') as f:\n",
        "        print(f\"Found dataset file: {DATA_FILE_PATH}\")\n",
        "except FileNotFoundError:\n",
        "    print(f\"Error: Dataset file not found at {DATA_FILE_PATH}.\")\n",
        "    print(\"Please upload the 'dataset.csv.csv' file using the file explorer in the left sidebar\")\n",
        "    print(\"or by running: `from google.colab import files; uploaded = files.colab.files.upload()`\")\n",
        "    # Exit or handle the error gracefully if the file isn't found\n",
        "    # For this example, we'll just print the message and assume the user will upload.\n",
        "    # The pipeline will handle the FileNotFoundError as implemented in load_data().\n",
        "\n",
        "\n",
        "# Initialize and run the pipeline using the class definition provided in the preceding code\n",
        "# This assumes the FraudDetectionPipeline class is defined in the cell above or already exists in the environment\n",
        "print(\"\\nStarting the Fraud Detection Pipeline...\")\n",
        "DATA_FILE_PATH = 'dataset.csv.csv'\n",
        "\n",
        "# Check if the file exists after uploading or if it's already in the environment\n",
        "try:\n",
        "    with open(DATA_FILE_PATH, 'r') as f:\n",
        "        print(f\"Found dataset file: {DATA_FILE_PATH}\")\n",
        "except FileNotFoundError:\n",
        "    print(f\"Error: Dataset file not found at {DATA_FILE_PATH}.\")\n",
        "    print(\"Please upload the 'dataset.csv.csv' file using the file explorer in the left sidebar\")\n",
        "    print(\"or by running: `from google.colab import files; uploaded = files.colab.files.upload()`\")\n",
        "    # Exit or handle the error gracefully if the file isn't found\n",
        "    # For this example, we'll just print the message and assume the user will upload.\n",
        "    # The pipeline will handle the FileNotFoundError as implemented in load_data().\n",
        "def preprocess_data(self):\n",
        "        \"\"\"Preprocess the data for machine learning.\"\"\"\n",
        "        if self.df is None:\n",
        "             print(\"Data not loaded. Cannot perform preprocessing.\")\n",
        "             return None, None # Return None for X and y\n",
        "\n",
        "        # Create a copy of the dataframe\n",
        "        df_processed = self.df.copy()\n",
        "\n",
        "        # Convert TransactionTime to datetime\n",
        "        df_processed['TransactionTime'] = pd.to_datetime(df_processed['TransactionTime'])\n",
        "\n",
        "        # Extract time features\n",
        "        df_processed['Hour'] = df_processed['TransactionTime'].dt.hour\n",
        "        df_processed['DayOfWeek'] = df_processed['TransactionTime'].dt.dayofweek\n",
        "        df_processed['IsWeekend'] = (df_processed['DayOfWeek'] >= 5).astype(int)\n",
        "\n",
        "        # Extract IP address network parts\n",
        "        # Handle potential errors in IPAddress format\n",
        "        df_processed['IP_Network'] = df_processed['IPAddress'].str.split('.').str[0:2].str.join('.')\n",
        "\n",
        "\n",
        "        # Handle categorical variables\n",
        "        # Location features\n",
        "        # Added check for potential None values in split result\n",
        "        df_processed['City'] = df_processed['Location'].str.split(',').str[0].str.strip()\n",
        "        # Handle potential None values in location split\n",
        "        df_processed['State'] = df_processed['Location'].str.split(',').str[1].str.strip()\n",
        "\n",
        "\n",
        "        # Amount-based features\n",
        "        df_processed['Amount_Log'] = np.log1p(df_processed['Amount'])\n",
        "        df_processed['Amount_Squared'] = df_processed['Amount'] ** 2\n",
        "\n",
        "        # User behavior features\n",
        "        user_stats = df_processed.groupby('UserID').agg({\n",
        "            'Amount': ['mean', 'std', 'sum'],\n",
        "            'TransactionID': 'count'\n",
        "        }).reset_index()\n",
        "        user_stats.columns = ['UserID', 'User_Avg_Amount', 'User_Std_Amount', 'User_Total_Amount', 'User_Transaction_Count']\n",
        "\n",
        "        # Merge user statistics\n",
        "        df_processed = df_processed.merge(user_stats, on='UserID', how='left')\n",
        "\n",
        "        # Fill missing values for user statistics\n",
        "        df_processed['User_Std_Amount'] = df_processed['User_Std_Amount'].fillna(0)\n",
        "\n",
        "        # One-hot encode categorical variables\n",
        "        categorical_features = ['Merchant', 'Category', 'Device', 'City', 'State', 'IP_Network']\n",
        "        df_encoded = pd.get_dummies(df_processed, columns=categorical_features, drop_first=True)\n",
        "\n",
        "        # Select features for modeling\n",
        "        feature_columns = [col for col in df_encoded.columns if col not in ['TransactionID', 'UserID', 'TransactionTime', 'Location', 'IPAddress', 'IsFraud']]\n",
        "\n",
        "        self.X = df_encoded[feature_columns]\n",
        "        self.y = df_encoded['IsFraud']\n",
        "\n",
        "        # Handle any remaining missing values in features using median imputation\n",
        "        imputer = SimpleImputer(strategy='median')\n",
        "        self.X = pd.DataFrame(imputer.fit_transform(self.X), columns=self.X.columns)\n",
        "\n",
        "        # --- ADDED CODE TO HANDLE MISSING VALUES IN TARGET VARIABLE ---\n",
        "        # Combine X and y to easily drop rows with missing target\n",
        "        combined_df = pd.concat([self.X, self.y], axis=1)\n",
        "\n",
        "        # Drop rows where the target variable 'IsFraud' is NaN\n",
        "        initial_rows = len(combined_df)\n",
        "        combined_df.dropna(subset=['IsFraud'], inplace=True)\n",
        "        rows_dropped = initial_rows - len(combined_df)\n",
        "        if rows_dropped > 0:\n",
        "            print(f\"Dropped {rows_dropped} rows with missing values in the target variable 'IsFraud'.\")\n",
        "\n",
        "        # Separate X and y again\n",
        "        self.X = combined_df.drop('IsFraud', axis=1)\n",
        "        self.y = combined_df['IsFraud']\n",
        "        # --- END OF ADDED CODE ---\n",
        "\n",
        "\n",
        "        print(f\"Feature matrix shape after processing: {self.X.shape}\")\n",
        "        print(f\"Target variable shape after processing: {self.y.shape}\")\n",
        "        print(f\"Number of features: {len(self.X.columns)}\") # Use self.X.columns for actual feature count\n",
        "\n",
        "        return self.X, self.y\n",
        "        # Optional: print the best model parameters after the pipeline completes\n",
        "if best_model:\n",
        "    print(\"\\nPipeline execution finished.\")\n",
        "    print(\"\\nBest trained model parameters:\")\n",
        "    print(\"best_model.get_params()\")\n",
        "\n",
        "# The detailed outputs (metrics, plots) are generated by the evaluate_models and feature_importance methods within the pipeline.\n",
        "if best_model:\n",
        "    print(\"\\nPipeline execution finished.\")\n",
        "    print(\"\\nBest trained model parameters:\")\n",
        "    print(best_model.get_params())\n",
        "\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cLvqfFJKSQ2G",
        "outputId": "deee114a-9664-43aa-e3d7-229c3f77ca4e"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found dataset file: dataset.csv.csv\n",
            "\n",
            "Starting the Fraud Detection Pipeline...\n",
            "Found dataset file: dataset.csv.csv\n"
          ]
        }
      ]
    }
  ]
}

